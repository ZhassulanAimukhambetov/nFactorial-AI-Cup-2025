from PyQt5.QtWidgets import (
    QMainWindow, QVBoxLayout, QWidget, QLabel, QPushButton, QSystemTrayIcon,
    QMenu, QAction, QApplication, QDialog, QStyle
)
from PyQt5.QtGui import QIcon, QFont
from PyQt5.QtCore import Qt, QTimer, pyqtSlot

from agents.decision_manager import DecisionManager, Decision
from gui.settings_dialog import SettingsDialog
from config.settings import load_settings
from agents.activity_monitor import ActivityMonitor
from agents.attention_analyzer import AttentionAnalyzer


class StatusWidget(QLabel):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏"""

    STYLES = {
        'default': """
            QLabel {
                background-color: #f0f4f8;
                border: 2px solid #cbd5e1;
                border-radius: 10px;
                padding: 20px;
                margin-bottom: 20px;
                color: #334155;
            }
        """,
        'distraction': """
            QLabel { 
                background-color: #fef2f2; 
                border: 2px solid #ef4444; 
                border-radius: 10px; 
                padding: 20px;
                margin-bottom: 20px; 
                color: #dc2626; 
            }
        """,
        'productive': """
            QLabel { 
                background-color: #ecfdf5; 
                border: 2px solid #22c55e; 
                border-radius: 10px; 
                padding: 20px;
                margin-bottom: 20px; 
                color: #16a34a; 
            }
        """,
        'ignored': """
            QLabel { 
                background-color: #e0f2fe; 
                border: 2px solid #38bdf8; 
                border-radius: 10px; 
                padding: 20px;
                margin-bottom: 20px; 
                color: #0ea5e9; 
            }
        """,
        'error': """
            QLabel { 
                background-color: #fef2f2; 
                border: 2px solid #ef4444; 
                border-radius: 10px; 
                padding: 20px;
                margin-bottom: 20px; 
                color: #dc2626; 
            }
        """,
        'unknown': """
            QLabel { 
                background-color: #eff6ff; 
                border: 2px solid #60a5fa; 
                border-radius: 10px; 
                padding: 20px;
                margin-bottom: 20px; 
                color: #2563eb; 
            }
        """
    }

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setAlignment(Qt.AlignCenter)
        font = QFont("Inter", 16)
        font.setBold(True)
        self.setFont(font)
        self.set_style('default')

    def set_style(self, style_name: str):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å"""
        if style_name in self.STYLES:
            self.setStyleSheet(self.STYLES[style_name])

    def update_for_classification(self, classification: str, window_title: str = ""):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        classification_map = {
            "distraction": ("distraction", f"–û–¢–í–õ–ï–ß–ï–ù–ò–ï: {window_title[:40]}..."),
            "productive": ("productive", f"–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ: {window_title[:40]}..."),
            "ignored": ("ignored", f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è: {window_title[:40]}..."),
            "error": ("error", "–û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê!"),
            "unknown": ("unknown", f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ: {window_title[:40]}...")
        }

        if classification in classification_map:
            style, text = classification_map[classification]
            self.set_style(style)
            self.setText(text)
        else:
            self.set_style('default')


class TrayManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è"""

    def __init__(self, parent_window):
        self.parent = parent_window
        self.tray_icon = QSystemTrayIcon(parent_window)
        self.setup_tray()

    def setup_tray(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è"""
        icon = self.parent.style().standardIcon(QStyle.SP_MessageBoxInformation)
        self.tray_icon.setIcon(icon)
        self.tray_icon.setToolTip("TameWork")

        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
        tray_menu = QMenu()

        actions = [
            ("–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ", self.parent.showNormal),
            ("–°–∫—Ä—ã—Ç—å –æ–∫–Ω–æ", self.parent.hide),
            ("–í—ã—Ö–æ–¥", self.parent.close_application)
        ]

        for text, handler in actions:
            action = QAction(text, self.parent)
            action.triggered.connect(handler)  # type: ignore
            tray_menu.addAction(action)

        self.tray_icon.setContextMenu(tray_menu)
        self.tray_icon.activated.connect(self._on_tray_activated)  # type: ignore
        self.tray_icon.show()

    def _on_tray_activated(self, reason):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–µ—è"""
        if reason == QSystemTrayIcon.Trigger:
            if self.parent.isVisible():
                self.parent.hide()
            else:
                self.parent.showNormal()
                self.parent.activateWindow()

    def show_message(self, title: str, message: str, icon=QSystemTrayIcon.Information, duration=5000):
        """–ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç—Ä–µ–µ"""
        self.tray_icon.showMessage(title, message, icon, duration)


class ActionHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π DecisionManager"""

    def __init__(self, parent_window):
        self.parent = parent_window

    def handle_decision(self, decision: Decision):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ DecisionManager"""
        try:
            handlers = {
                'notify': self._handle_notification,
                'block_app': self._handle_block_app,
                'close_window': self._handle_close_window,
                'log_activity': self._handle_log_activity,
                'no_action': self._handle_no_action
            }

            handler = handlers.get(decision.action_type.value)
            if handler:
                handler(decision)
            else:
                self.parent.update_status(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {decision.action_type.value}")

        except Exception as e:
            self.parent.update_status(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: {str(e)}")

    def _handle_notification(self, decision: Decision):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.parent.tray_manager.show_message(
            "TameWork - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            decision.message,
            QSystemTrayIcon.Warning
        )
        self.parent.update_status(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {decision.message[:50]}...")

    def _handle_block_app(self, decision: Decision):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        executable = decision.target.split('|')[0].strip() if decision.target else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        self.parent.update_status(f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {executable[:20]}...")
        self.parent.tray_manager.show_message(
            "TameWork - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞",
            f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {executable}",
            QSystemTrayIcon.Critical
        )
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

    def _handle_close_window(self, decision: Decision):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.parent.update_status("–ó–∞–∫—Ä—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞...")
        try:
            import pyautogui
            pyautogui.hotkey('alt', 'f4')
            self.parent.tray_manager.show_message(
                "TameWork - –î–µ–π—Å—Ç–≤–∏–µ",
                "–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ",
                QSystemTrayIcon.Information
            )
        except Exception as e:
            self.parent.update_status(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞: {str(e)}")

    def _handle_log_activity(self, decision: Decision):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        self.parent.update_status(decision.reason or "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")

    def _handle_no_action(self, decision: Decision):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–µ–π—Å—Ç–≤–∏–π"""
        if decision.reason:
            self.parent.update_status(decision.reason)


class StatisticsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""

    def __init__(self, decision_manager, display_widget):
        self.decision_manager = decision_manager
        self.display_widget = display_widget
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_statistics)  # type: ignore
        self.timer.start(5000)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    def update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats = self.decision_manager.get_statistics()
            tooltip_text = self._format_statistics(stats)
            self.display_widget.setToolTip(tooltip_text)
        except Exception as e:
            self.display_widget.setToolTip(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

    def _format_statistics(self, stats: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        text_parts = [
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:",
            f"–í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–∏–π: {stats['total_decisions']}",
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {stats['performance_stats']['notifications_sent']}",
            f"–ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {stats['performance_stats']['apps_blocked']}",
            "–¢–æ–ø –Ω–∞—Ä—É—à–µ–Ω–∏–π:"
        ]

        for violation in stats.get('top_violations', [])[:2]:
            text_parts.append(f"- {violation['target']}: {violation['count']} —Ä–∞–∑")

        text_parts.append(f"\n–¢—Ä–µ–Ω–¥: {stats.get('decision_trend', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")

        return "\n".join(text_parts)


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.current_settings = load_settings()
        self._setup_window()
        self._setup_components()
        self._setup_connections()
        self._start_monitoring()

    def _setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        self.setWindowTitle("TameWork")
        self.setGeometry(100, 100, 700, 500)
        self.setMinimumSize(400, 300)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout()
        central_widget.setLayout(layout)

        # –°—Ç–∞—Ç—É—Å –≤–∏–¥–∂–µ—Ç
        self.status_widget = StatusWidget()
        self.status_widget.setText(self._get_initial_status_message())
        layout.addWidget(self.status_widget)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –æ–∫–Ω–µ
        self.active_window_label = QLabel("–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        self.active_window_label.setAlignment(Qt.AlignCenter)
        self.active_window_label.setFont(QFont("Inter", 12))
        self.active_window_label.setStyleSheet("QLabel { color: #64748b; margin-bottom: 10px; }")
        layout.addWidget(self.active_window_label)

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_button = QPushButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.settings_button.setStyleSheet("""
            QPushButton {
                background-color: #4f46e5;
                color: white;
                padding: 12px 24px;
                border: none;
                border-radius: 8px;
                font-size: 16px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #4338ca;
            }
            QPushButton:pressed {
                background-color: #3730a3;
            }
        """)
        layout.addWidget(self.settings_button)
        layout.addStretch(1)

    def _setup_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        # –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π
        self.tray_manager = TrayManager(self)

        # –ê–≥–µ–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.activity_monitor = ActivityMonitor()
        self.attention_analyzer = AttentionAnalyzer()
        self.decision_manager = DecisionManager(self.current_settings)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.action_handler = ActionHandler(self)
        self.statistics_manager = StatisticsManager(self.decision_manager, self.active_window_label)

    def _setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å–ª–æ—Ç–æ–≤"""
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_button.clicked.connect(self.open_settings)  # type: ignore

        # ActivityMonitor
        self.activity_monitor.active_window_changed.connect(self.update_active_window_display)
        self.activity_monitor.active_window_changed.connect(self.attention_analyzer.add_data_for_analysis)
        self.activity_monitor.status_message.connect(self.update_status)

        # AttentionAnalyzer
        self.attention_analyzer.analysis_result.connect(self.handle_analysis_result)
        self.attention_analyzer.analysis_result.connect(self._create_decision_from_analysis)
        self.attention_analyzer.screenshot_analysis_result.connect(self.decision_manager.make_screenshot_decision)
        self.attention_analyzer.status_message.connect(self.update_status)

        # DecisionManager
        self.decision_manager.notification_request.connect(self._show_notification)
        self.decision_manager.action_required.connect(self._handle_legacy_action)
        self.decision_manager.status_update.connect(self.update_status)

    def _start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.activity_monitor.start()
        self.attention_analyzer.start()

    def _get_initial_status_message(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        mode_text = "–ú—è–≥–∫–∏–π" if self.current_settings["mode"] == "soft" else "–°—Ç—Ä–æ–≥–∏–π"
        return f"TameWork\n–†–µ–∂–∏–º: {mode_text}"

    @pyqtSlot(str, str)
    def update_active_window_display(self, window_title: str, executable_name: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        display_title = window_title if window_title else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"
        display_executable = executable_name if executable_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        self.active_window_label.setText(f"–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ: {display_title}\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {display_executable}")

    @pyqtSlot(str, str)
    def handle_analysis_result(self, window_title: str, classification: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        self.status_widget.update_for_classification(classification, window_title)

    @pyqtSlot(str, str)
    def _create_decision_from_analysis(self, window_title: str, classification: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        analysis_data = {
            'classification': classification,
            'window_title': window_title,
            'executable_name': '',  # –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ activity_monitor
            'confidence': 1.0
        }
        decision = self.decision_manager.make_decision(analysis_data)
        self.action_handler.handle_decision(decision)

    @pyqtSlot(str)
    def _show_notification(self, message: str):
        """–ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ DecisionManager"""
        print(f"üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: {message}")
        self.tray_icon.showMessage(
            "TameWork - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            message,
            QSystemTrayIcon.Information,
            5000
        )
        self.update_status(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message[:50]}...")
    @pyqtSlot(str, str)
    def _handle_legacy_action(self, action_type: str, target_info: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–µ–π—Å—Ç–≤–∏–π (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Decision –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        from agents.decision_manager import ActionType, ViolationSeverity

        action_map = {
            'block_or_close': ActionType.BLOCK_APP,
            'close_active_window': ActionType.CLOSE_WINDOW,
            'notify': ActionType.NOTIFY
        }

        action = action_map.get(action_type, ActionType.NO_ACTION)
        decision = Decision(
            action_type=action,
            severity=ViolationSeverity.MEDIUM,
            target=target_info,
            message=f"–î–µ–π—Å—Ç–≤–∏–µ: {action_type}",
            reason="–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –∫–æ–º–∞–Ω–¥—ã"
        )
        self.action_handler.handle_decision(decision)

    def update_status(self, message: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if not any(keyword in message.lower() for keyword in ['–æ—Ç–≤–ª–µ—á–µ–Ω–∏–µ', '–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ', '–æ—à–∏–±–∫–∞']):
            self.status_widget.setText(message)

    def open_settings(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        dialog = SettingsDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            self.current_settings = load_settings()
            self.status_widget.setText(self._get_initial_status_message())
            self.attention_analyzer.update_settings()
            self.decision_manager.update_settings(self.current_settings)
            print("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞.")
        else:
            print("–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω.")

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.activity_monitor.stop()
        self.attention_analyzer.stop()

        if self.tray_manager.tray_icon.isVisible():
            self.hide()
            event.ignore()
            self._show_notification("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–∞–π")
        else:
            event.accept()

    def close_application(self):
        """–ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.activity_monitor.stop()
        self.attention_analyzer.stop()
        self.tray_manager.tray_icon.hide()
        QApplication.quit()